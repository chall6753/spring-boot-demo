

pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_DIGEST', defaultValue: '', description: 'Digest of the image to tag (e.g., sha256:abcd1234)')
        string(name: 'NEW_TAG', defaultValue: '', description: 'The new tag to add (e.g., latest, v1.0.0)')
        choice(name: 'ACTION', choices: ['ADD', 'REMOVE'], description: 'Add or Remove tag from image')
    }

    environment {
        GCP_PROJECT = 'propane-sphinx-367900'
        IMAGE_NAME = 'spring-boot-demo'
        GCR_IMAGE = "gcr.io/${GCP_PROJECT}/${IMAGE_NAME}"
    }



stages {
            stage('Authenticate with GCR') {
                steps {
                    withCredentials([file(credentialsId: 'gcr-json-key', variable: 'GCR_KEYFILE')]) {
                        sh '''
                        gcloud auth activate-service-account --key-file=${GCR_KEYFILE}
                        gcloud auth configure-docker --quiet
                    '''
                    }
                }
            }

            stage('Manage Image Tags in GCR') {
                steps {
                    script {
                        if (params.ACTION == 'ADD') {
                            // Add a new tag to the image
                            sh """
                            gcloud container images add-tag ${GCR_IMAGE}@${params.IMAGE_DIGEST} ${GCR_IMAGE}:${params.NEW_TAG} --quiet
                        """
                            echo "Tag ${params.NEW_TAG} added to image with digest ${params.IMAGE_DIGEST}"
                        } else if (params.ACTION == 'REMOVE') {
                            // Remove a tag from the image
                            sh """
                            gcloud container images untag ${GCR_IMAGE}:${params.NEW_TAG} --quiet
                        """
                            echo "Tag ${params.NEW_TAG} removed from image."
                        }
                    }
                }
            }
            stage('Update bitbucket tags') {
                steps {
                    withCredentials([sshUserPrivateKey(credentialsId: 'github-ssh', keyFileVariable: 'SSH_KEY')]) {
                                            sh """
                                                # Ensure the .ssh directory exists
                                                mkdir -p ~/.ssh

                                                # Add GitHub's SSH key to known_hosts to avoid host key verification failure
                                                ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

                                                # Start the SSH agent and add the SSH key
                                                eval `ssh-agent -s`
                                                ssh-add ${SSH_KEY}

                                                # Perform git operations
                                                git tag ${NEW_TAG}
                                                git remote set-url origin git@github.com:chall6753/spring-boot-demo.git
                                                git push origin ${NEW_TAG}
                                            """
                                        }
                }

            }
        }

    post {
        success {
            echo "Operation completed successfully!"
        }
        failure {
            echo "Operation failed!"
        }
    }
}
